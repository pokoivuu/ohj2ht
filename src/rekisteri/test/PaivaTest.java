package rekisteri.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import rekisteri.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.22 17:31:24 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class PaivaTest {



  // Generated by ComTest BEGIN
  /** testAseta150 */
  @Test
  public void testAseta150() {    // Paiva: 150
    Paiva paiva = new Paiva(); 
    assertEquals("From: Paiva line: 152", null, paiva.aseta(1, "Lempäälä")); 
    assertEquals("From: Paiva line: 153", "Ei ole sopiva kellonaika.", paiva.aseta(2, "11:165")); 
    assertEquals("From: Paiva line: 154", null, paiva.aseta(2, "11:00")); 
    assertEquals("From: Paiva line: 155", "Väärä päivämäärämuoto.", paiva.aseta(3, "111.15.10")); 
    assertEquals("From: Paiva line: 156", null, paiva.aseta(3, "1.1.1990")); 
    assertEquals("From: Paiva line: 157", "Lämpötila väärin jono = \"peruna\"", paiva.aseta(4, "peruna")); 
    assertEquals("From: Paiva line: 158", null, paiva.aseta(4, "15")); 
    assertEquals("From: Paiva line: 159", "Sademäärä väärin jono = \"peruna\"", paiva.aseta(5, "peruna")); 
    assertEquals("From: Paiva line: 160", null, paiva.aseta(5, "100")); 
    assertEquals("From: Paiva line: 161", "Kosteus väärin jono = \"peruna\"", paiva.aseta(6, "peruna")); 
    assertEquals("From: Paiva line: 162", null, paiva.aseta(6, "100")); 
    assertEquals("From: Paiva line: 163", "Tuulen nopeus väärin jono = \"peruna\"", paiva.aseta(7, "peruna")); 
    assertEquals("From: Paiva line: 164", null, paiva.aseta(7, "100")); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testToString262 */
  @Test
  public void testToString262() {    // Paiva: 262
    Paiva paiva = new Paiva(); 
    paiva.parse("   1  |  Lempäälä   | 12:00"); 
    assertEquals("From: Paiva line: 265", true, paiva.toString().startsWith("1|Lempäälä|12:00|")); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testParse284 */
  @Test
  public void testParse284() {    // Paiva: 284
    Paiva paiva = new Paiva(); 
    paiva.parse("   1  |  Lempäälä   | 12:00"); 
    assertEquals("From: Paiva line: 287", 1, paiva.getTunnusNro()); 
    assertEquals("From: Paiva line: 288", true, paiva.toString().startsWith("1|Lempäälä|12:00|")); 
    paiva.rekisteroi(); 
    int n = paiva.getTunnusNro(); 
    paiva.parse(""+(n+5)); 
    paiva.rekisteroi(); 
    assertEquals("From: Paiva line: 294", n+5+1, paiva.getTunnusNro()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testClone314 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testClone314() throws CloneNotSupportedException {    // Paiva: 314
    Paiva paiva = new Paiva(); 
    paiva.parse("   1  |  Lempäälä   | 12:00"); 
    Paiva kopio = paiva.clone(); 
    assertEquals("From: Paiva line: 319", paiva.toString(), kopio.toString()); 
    paiva.parse("   2  |  Vihti   | 12:00"); 
    assertEquals("From: Paiva line: 321", false, kopio.toString().equals(paiva.toString())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEquals339 */
  @Test
  public void testEquals339() {    // Paiva: 339
    Paiva paiva1 = new Paiva(); 
    paiva1.parse("   2  |  Lempäälä   | 12:00"); 
    Paiva paiva2 = new Paiva(); 
    paiva2.parse("   2  |  Lempäälä   | 12:00"); 
    Paiva paiva3 = new Paiva(); 
    paiva3.parse("   2  |  Lempäälä   | 12:01"); 
    assertEquals("From: Paiva line: 347", true, paiva1.equals(paiva2)); 
    assertEquals("From: Paiva line: 348", true, paiva2.equals(paiva1)); 
    assertEquals("From: Paiva line: 349", false, paiva1.equals(paiva3)); 
    assertEquals("From: Paiva line: 350", false, paiva3.equals(paiva2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testRekisteroi379 */
  @Test
  public void testRekisteroi379() {    // Paiva: 379
    Paiva maanantai1 = new Paiva(); 
    assertEquals("From: Paiva line: 381", 0, maanantai1.getTunnusNro()); 
    maanantai1.rekisteroi(); 
    Paiva maanantai2 = new Paiva(); 
    maanantai2.rekisteroi(); 
    int n1 = maanantai1.getTunnusNro(); 
    int n2 = maanantai2.getTunnusNro(); 
    assertEquals("From: Paiva line: 387", n2-1, n1); 
  } // Generated by ComTest END
}